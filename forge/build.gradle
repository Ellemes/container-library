import ninjaphenix.gradle.mod.api.task.MinifyJsonTask

//import org.gradle.jvm.tasks.Jar
//import java.text.DateFormat
//import java.util.*
//
//plugins {
//    id("ninjaphenix.gradle.mod").apply(false)
//    id("net.minecraftforge.gradle")
//    id("org.spongepowered.mixin")
//    `maven-publish`
//}
//
////region Required for test project.
//configurations {
//    create("dev")
//}
//
//tasks.jar {
//    archiveClassifier.set("dev")
//}
//
//artifacts {
//    this.add("dev", tasks.jar.get().archiveFile) {
//        this.builtBy(tasks.jar)
//    }
//}
////endregion
//
//
//dependencies {
//    compileOnly(group = "mezz.jei", name = "jei-${properties["jei_minecraft_version"]}", version = "${properties["jei_version"]}", classifier = "api")
//    compileOnly(("org.anti-ad.mc:inventory-profiles-next:forge-${properties["ipn_minecraft_version"]}-${properties["ipn_version"]}"))
//    testCompileOnly(("org.anti-ad.mc:inventory-profiles-next:forge-${properties["ipn_minecraft_version"]}-${properties["ipn_version"]}"))
//}
//
//val jarTask = tasks.getByName<Jar>("jar") {
//    archiveClassifier.set("fat")
//
//    this.finalizedBy("reobfJar")
//}
//
//val namedJarTask = tasks.register<Jar>("namedJar") {
//    archiveClassifier.set("named")
//    from(sourceSets["main"].output)
//}
//
//val minifyJarTask = tasks.register<ninjaphenix.gradle.mod.api.task.MinifyJsonTask>("minJar") {
//    input.set(jarTask.outputs.files.singleFile)
//    archiveClassifier.set("forge")
//
//    manifest.attributes(mapOf(
//            "Specification-Title" to "NinjaPhenix's Container Library",
//            "Specification-Vendor" to "ninjaphenix",
//            "Specification-Version" to "1.0",
//            "Implementation-Title" to "ninjaphenix_container_library_forge",
//            "Implementation-Version" to "${properties["mod_version"]}",
//            "Implementation-Vendor" to "ninjaphenix",
//            "Implementation-Timestamp" to DateFormat.getDateTimeInstance().format(Date()),
//            "Automatic-Module-Name" to "ninjaphenix.container_library",
//            "MixinConfigs" to "ninjaphenix_container_lib.mixins.json"
//    ))
//
//    from(rootDir.resolve("LICENSE"))
//    dependsOn(tasks["reobfJar"])
//}
//
//tasks.getByName("build") {
//    dependsOn(minifyJarTask)
//}
//
//// https://docs.gradle.org/current/userguide/publishing_maven.html
//publishing {
//    publications {
//        create<MavenPublication>("maven") {
//            artifactId = "container_library"
//            artifact(minifyJarTask) {
//                builtBy(minifyJarTask)
//            }
//        }
//    }
//}

plugins {
    id "com.github.johnrengelman.shadow"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
        mixinConfig "ninjaphenix_container_lib.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven {
        // JEI maven
        name = "Progwml6 maven"
        url = uri("https://dvs1.progwml6.com/files/maven/")
    }
    maven {
        // JEI maven - fallback
        name = "ModMaven"
        url = uri("https://modmaven.k-4u.nl")
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    //mavenCentral()
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${project.forge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    compileOnly("mezz.jei:jei-${project.jei_minecraft_version}:${project.jei_version}:api")
    compileOnly("maven.modrinth:inventory-profiles-next:forge-${rootProject.ipn_minecraft_version}-${rootProject.ipn_version}")
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    //exclude "fabric.mod.json" // dead code?
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "fat"
}

jar {
    classifier "dev"
}

def minifyJarTask = tasks.register("minJar", MinifyJsonTask.class, task -> {
    task.input.set(remapJar.outputs.files.singleFile)
    task.archiveClassifier.set project.name
    task.from(rootDir.toPath().resolve("LICENSE"))
    task.dependsOn(remapJar)
})
tasks.getByName("build") {
    dependsOn(minifyJarTask)
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = "container-library"
            from components.java
        }
    }
}
